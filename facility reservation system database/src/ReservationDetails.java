
import com.formdev.flatlaf.FlatLightLaf;
import com.toedter.calendar.JCalendar;
import java.awt.Color;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author JAMES DIONISIO
 */
public class ReservationDetails extends javax.swing.JFrame {

  
 public ReservationDetails(String username) {
        initComponents();
        nametextfield.setText(username);
        nametextfield.setEditable(false);
        populateFloors();
        populateTimeComboboxes();

        
            updateRoomsBasedOnFloor();

    floorcombobox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateRoomsBasedOnFloor();
        }
    });
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nametextfield = new javax.swing.JTextField();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        StartTime = new javax.swing.JComboBox<>();
        EndTime = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textareapurpose = new javax.swing.JTextArea();
        enterdetailbutton = new javax.swing.JButton();
        canceldetailbutton = new javax.swing.JButton();
        availableroomcombobox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        floorcombobox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reservation");
        setAlwaysOnTop(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Name:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 58, 168, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/new.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 19)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Reservation Details");
        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel3.setOpaque(true);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 6, 293, 46));

        nametextfield.setToolTipText("Name");
        nametextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nametextfieldActionPerformed(evt);
            }
        });
        jPanel1.add(nametextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 80, 362, -1));

        jCalendar1.setBackground(new java.awt.Color(255, 255, 255));
        jCalendar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.add(jCalendar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 165, 362, 175));

        StartTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(StartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 368, 175, -1));

        EndTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(EndTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 368, 181, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Start Time:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 94, 10));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Purpose of Reservation:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 395, 175, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("End Time:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 346, 73, -1));

        textareapurpose.setColumns(20);
        textareapurpose.setRows(5);
        jScrollPane1.setViewportView(textareapurpose);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 362, 80));

        enterdetailbutton.setText("ENTER");
        enterdetailbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterdetailbuttonActionPerformed(evt);
            }
        });
        jPanel1.add(enterdetailbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 509, -1, -1));

        canceldetailbutton.setText("CANCEL");
        canceldetailbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canceldetailbuttonActionPerformed(evt);
            }
        });
        jPanel1.add(canceldetailbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 509, -1, -1));

        availableroomcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(availableroomcombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 131, 168, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Room:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 108, 168, -1));

        floorcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(floorcombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 131, 170, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Floor:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 108, 107, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background.jpg"))); // NOI18N
        jLabel9.setText("jLabel9");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 550));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nametextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametextfieldActionPerformed
        // just nothing here
    }//GEN-LAST:event_nametextfieldActionPerformed

    private void enterdetailbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterdetailbuttonActionPerformed
     String username = nametextfield.getText();
    String roomName = (String) availableroomcombobox.getSelectedItem();
    String purpose = textareapurpose.getText();

    Date selectedDate = jCalendar1.getDate();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String formattedDate = sdf.format(selectedDate);

    String startTime = (String) StartTime.getSelectedItem();
    String endTime = (String) EndTime.getSelectedItem();

    if (username.isEmpty() || roomName == null || purpose.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please complete all fields.");
        return;
    }

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Room_Reservation?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "123456789")) {

        // 1. Get user_id
        int userId = -1;
        String getUserQuery = "SELECT user_id FROM users WHERE username = ?";
        try (PreparedStatement userStmt = conn.prepareStatement(getUserQuery)) {
            userStmt.setString(1, username);
            ResultSet userRs = userStmt.executeQuery();
            if (userRs.next()) {
                userId = userRs.getInt("user_id");
            } else {
                JOptionPane.showMessageDialog(this, "User not found.");
                return;
            }
        }

        // 2. Get room_id
        int roomId = -1;
        String getRoomQuery = "SELECT room_id FROM rooms WHERE room_name = ?";
        try (PreparedStatement roomStmt = conn.prepareStatement(getRoomQuery)) {
            roomStmt.setString(1, roomName);
            ResultSet roomRs = roomStmt.executeQuery();
            if (roomRs.next()) {
                roomId = roomRs.getInt("room_id");
            } else {
                JOptionPane.showMessageDialog(this, "Room not found.");
                return;
            }
        }
                String checkQuery = "SELECT * FROM reservations WHERE room_id = ? AND date = ? AND " +
                            "((start_time < ? AND end_time > ?) OR (start_time >= ? AND start_time < ?))";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
            checkStmt.setInt(1, roomId);
            checkStmt.setString(2, formattedDate);
            checkStmt.setString(3, endTime);
            checkStmt.setString(4, startTime);
            checkStmt.setString(5, startTime);
            checkStmt.setString(6, endTime);

            ResultSet checkRs = checkStmt.executeQuery();
            if (checkRs.next()) {
                JOptionPane.showMessageDialog(this, "This room is already reserved at the selected time.");
                return;
            }
        }
        // 3. Insert reservation
        String insertQuery = "INSERT INTO reservations (user_id, room_id, purpose, date, start_time, end_time, status) VALUES (?, ?, ?, ?, ?, ?, 'Pending')";
        try (PreparedStatement insertStmt = conn.prepareStatement(insertQuery)) {
            insertStmt.setInt(1, userId);
            insertStmt.setInt(2, roomId);
            insertStmt.setString(3, purpose);
            insertStmt.setString(4, formattedDate);
            insertStmt.setString(5, startTime);
            insertStmt.setString(6, endTime);

            int result = insertStmt.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Reservation submitted successfully!");
                this.dispose(); // close the form
            } else {
                JOptionPane.showMessageDialog(this, "Failed to insert reservation.");
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_enterdetailbuttonActionPerformed

    
    private void canceldetailbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canceldetailbuttonActionPerformed
        this.dispose();
    }//GEN-LAST:event_canceldetailbuttonActionPerformed

    private void populateFloors() {
    floorcombobox.removeAllItems();
    floorcombobox.addItem("4F");
    floorcombobox.addItem("5F");
}
    private void updateRoomsBasedOnFloor() {
    String selectedFloor = (String) floorcombobox.getSelectedItem();
    availableroomcombobox.removeAllItems();

    if ("4F".equals(selectedFloor)) {
        availableroomcombobox.addItem("Prayer Room");
        availableroomcombobox.addItem("401");
        availableroomcombobox.addItem("402");
        availableroomcombobox.addItem("403");
        availableroomcombobox.addItem("404");
        availableroomcombobox.addItem("405");
    } else if ("5F".equals(selectedFloor)) {
        availableroomcombobox.addItem("Gynasium");
        availableroomcombobox.addItem("Table Tennis Room");
        availableroomcombobox.addItem("Discussion room");
        availableroomcombobox.addItem("501");
        availableroomcombobox.addItem("502");
        availableroomcombobox.addItem("503");
        availableroomcombobox.addItem("504");
        availableroomcombobox.addItem("505");
    }
}
    private void populateTimeComboboxes() {
    StartTime.removeAllItems();
    EndTime.removeAllItems();

    LocalTime start = LocalTime.of(7, 0); // 7:00 AM
    LocalTime end = LocalTime.of(21, 0);  // 9:00 PM

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm a");

    while (!start.isAfter(end)) {
        String timeStr = start.format(formatter);
        StartTime.addItem(timeStr);
        EndTime.addItem(timeStr);
        start = start.plusMinutes(30);
    }
}
    public static void main(String args[]) {

         
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> EndTime;
    private javax.swing.JComboBox<String> StartTime;
    private javax.swing.JComboBox<String> availableroomcombobox;
    private javax.swing.JButton canceldetailbutton;
    private javax.swing.JButton enterdetailbutton;
    private javax.swing.JComboBox<String> floorcombobox;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nametextfield;
    private javax.swing.JTextArea textareapurpose;
    // End of variables declaration//GEN-END:variables
}
